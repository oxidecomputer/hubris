name: build
on: [push, pull_request]

jobs:
  skip_duplicate_jobs:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          do_not_skip: '["pull_request", "workflow_dispath", "schedule"]'
  build:
    needs: skip_duplicate_jobs
    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}
    name: dist
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build: [stm32f4, lpc55, stm32h7b3, stm32h743, gemini, gemini-rot]
        include:
          - build: stm32f4
            app_name: demo
            app_toml: demo/app.toml
            target: thumbv7em-none-eabihf
          - build: stm32h7b3
            app_name: demo-stm32h7b3
            app_toml: demo-stm32h7/app-h7b3.toml
            target: thumbv7em-none-eabihf
          - build: lpc55
            app_name: lpc55
            app_toml: lpc55/app.toml
            target: thumbv8m.main-none-eabihf
          - build: stm32h743
            app_name: demo-stm32h743
            app_toml: demo-stm32h7/app-h743.toml
            target: thumbv7em-none-eabihf
          - build: gemini
            app_name: gemini-bu
            app_toml: gemini-bu/app.toml
            target: thumbv7em-none-eabihf
          - build: gemini-rot
            app_name: gemini-bu-rot
            app_toml: gemini-bu-rot/app.toml
            target: thumbv8m.main-none-eabihf

          - os: ubuntu-latest
            deps: sudo apt-get install binutils-arm-none-eabi libudev-dev
          - os: windows-latest
            deps: |
              Invoke-WebRequest -Uri https://github.com/steveklabnik/arm-none-eabi-objcopy/releases/download/9-2020-q2-update/arm-none-eabi-objcopy.exe -OutFile "$Env:RUNNER_TEMP\arm-none-eabi-objcopy.exe"
              echo $Env:RUNNER_TEMP >> $Env:GITHUB_PATH
              echo "VCPKG_ROOT=$Env:VCPKG_INSTALLATION_ROOT" >> $Env:GITHUB_ENV
              vcpkg install openssl:x64-windows
    env:
      VCPKGRS_DYNAMIC: 1

    steps:
      # check out our code
      - uses: actions/checkout@v2
      - name: Update submodule
        env:
          SSH_KEY_FOR_SUBMODULE: ${{secrets.SSH_KEY_FOR_SUBMODULE}}
          SSH_PUBKEY_FOR_SUBMODULE: ${{secrets.SSH_PUBKEY_FOR_SUBMODULE}}
        run: |
            mkdir $HOME/.ssh && ssh-keyscan github.com >> $HOME/.ssh/known_hosts && echo "$SSH_KEY_FOR_SUBMODULE" > $HOME/.ssh/id_rsa && echo "$SSH_PUBKEY_FOR_SUBMODULE" > $HOME/.ssh/id_rsa.pub && chmod 600 $HOME/.ssh/id_rsa && chmod 600 $HOME/.ssh/id_rsa.pub && git submodule update --init --recursive
        shell: bash

      # install rust toolchain
      - uses: actions-rs/toolchain@v1
        id: rust-toolchain
        with:
          # normally we would specify a toolchain here, but we have a
          # rust-toolchain file, so that gets picked up automatically.
          profile: minimal
          target: ${{ matrix.target }}
          override: true

      # cache the cargo registry & index
      - name: Cache cargo outputs
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache vcpkg 
        uses: actions/cache@v2
        with:
          path: C:\vcpkg\downloads
          key: ${{ runner.os }}-vcpkg-download-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-download-${{ matrix.os }}-
            ${{ runner.os }}-vcpkg-download-

      # cache our build outputs. note that we ignore our dist directory.
      - name: Cache build outputs
        uses: actions/cache@v2
        with:
          path: |
            target
            !target/${{ matrix.app_name }}/dist
          key: ${{ runner.os }}-build-${{ matrix.build }}-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      # install dependencies
      - name: Install dependencies
        run: '${{ matrix.deps }}'

      # invoke our build
      - uses: actions-rs/cargo@v1
        env:
          RUST_BACKTRACE: 1
        with:
          command: xtask
          args: dist ${{ matrix.app_toml}}

      # upload the output of our build
      - name: Upload build archive
        uses: actions/upload-artifact@v1
        with:
          name: dist-${{ matrix.os }}-${{ matrix.build }}
          path: target/${{ matrix.app_name }}/dist/build-${{ matrix.app_name }}.zip
