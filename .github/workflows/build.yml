name: build
on: [push, pull_request]

jobs:
  build-stm32f4:
    name: ARMv7-M demo build
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            deps: sudo apt-get install binutils-arm-none-eabi
    steps:
      # check out our code
      - uses: actions/checkout@v2

      # install rust toolchain
      - uses: actions-rs/toolchain@v1
        with:
          # normally we would specify a toolchain here, but we have a
          # rust-toolchain file, so that gets picked up automatically.
          profile: minimal
          target: thumbv7em-none-eabihf
          override: true

      # cache the cargo registry & index
      - name: Cache cargo outputs
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      # cache our build outputs. note that we ignore our dist directory.
      - name: Cache build outputs
        uses: actions/cache@v2
        with:
          path: |
            target
            !target/dist
          key: ${{ runner.os }}-build7-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      # install dependencies
      - run: '${{ matrix.deps }}'

      # invoke our build
      - uses: actions-rs/cargo@v1
        with:
          command: xtask
          args: dist demo/app.toml

      # upload the output of our build
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v1
        with:
          name: target-dist-stm32f4
          path: target/dist

  build-lpc55:
    name: ARMv8-M demo build
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            deps: sudo apt-get install binutils-arm-none-eabi
    steps:
      # check out our code
      - uses: actions/checkout@v2

      # install rust toolchain
      - uses: actions-rs/toolchain@v1
        with:
          # normally we would specify a toolchain here, but we have a
          # rust-toolchain file, so that gets picked up automatically.
          profile: minimal
          target: thumbv8m.main-none-eabihf
          override: true

      # cache the cargo registry & index
      - name: Cache cargo outputs
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      # cache our build outputs
      # cache our build outputs. note that we ignore our dist directory.
      - name: Cache build outputs
        uses: actions/cache@v2
        with:
          path: |
            target
            !target/dist
          key: ${{ runner.os }}-build8-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      # install dependencies
      - run: '${{ matrix.deps }}'

      # invoke our build
      - uses: actions-rs/cargo@v1
        with:
          command: xtask
          args: dist lpc55/app.toml

      # upload the output of our build
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v1
        with:
          name: target-dist-lpc55
          path: target/dist

  build-stm32h7:
    name: ARMv7-M demo build (STM32H7)
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            deps: sudo apt-get install binutils-arm-none-eabi

    steps:
      # check out our code
      - uses: actions/checkout@v2

      # install rust toolchain
      - uses: actions-rs/toolchain@v1
        with:
          # normally we would specify a toolchain here, but we have a
          # rust-toolchain file, so that gets picked up automatically.
          profile: minimal
          target: thumbv7em-none-eabihf
          override: true

      # cache the cargo registry & index
      - name: Cache cargo outputs
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      # cache our build outputs
      # cache our build outputs. note that we ignore our dist directory.
      - name: Cache build outputs
        uses: actions/cache@v2
        with:
          path: |
            target
            !target/dist
          key: ${{ runner.os }}-build7-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      # install dependencies
      - run: '${{ matrix.deps }}'

      # invoke our build
      - uses: actions-rs/cargo@v1
        with:
          command: xtask
          args: dist demo-stm32h7/app.toml

      # upload the output of our build
      - name: Upload package artifacts
        uses: actions/upload-artifact@v1
        with:
          name: target-dist-stm32h7
          path: target/dist
