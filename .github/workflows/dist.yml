name: dist
on: [push, pull_request]

jobs:
  skip_duplicate_jobs:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
  build:
    needs: skip_duplicate_jobs
    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}
    name: dist
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build: [stm32f3, stm32f4, lpc55, stm32h743, stm32h753, gemini, gemini-rot, gimlet-b, sidecar, stm32g0, gimlet-rot]
        include:
          - build: stm32g0
            app_name: demo-stm32g070-nucleo
            app_toml: app/demo-stm32g0-nucleo/app-g070.toml
            target: thumbv6m-none-eabi
          - build: stm32f3
            app_name: demo-stm32f3-discovery
            app_toml: app/demo-stm32f4-discovery/app-f3.toml
            target: thumbv7em-none-eabihf
          - build: stm32f4
            app_name: demo-stm32f4-discovery
            app_toml: app/demo-stm32f4-discovery/app.toml
            target: thumbv7em-none-eabihf
          - build: lpc55
            app_name: lpc55xpresso
            app_toml: app/lpc55xpresso/app.toml
            target: thumbv8m.main-none-eabihf
          - build: stm32h743
            app_name: demo-stm32h743-nucleo
            app_toml: app/demo-stm32h7-nucleo/app-h743.toml
            target: thumbv7em-none-eabihf
          - build: stm32h753
            app_name: demo-stm32h753-nucleo
            app_toml: app/demo-stm32h7-nucleo/app-h753.toml
            target: thumbv7em-none-eabihf
          - build: gemini
            app_name: gemini-bu
            app_toml: app/gemini-bu/app.toml
            target: thumbv7em-none-eabihf
          - build: gemini-rot
            app_name: gemini-bu-rot
            app_toml: app/gemini-bu-rot/app.toml
            target: thumbv8m.main-none-eabihf
          - build: gimlet-b
            app_name: gimlet-b
            app_toml: app/gimlet/rev-b.toml
            target: thumbv7em-none-eabihf
          - build: sidecar
            app_name: sidecar
            app_toml: app/sidecar/app.toml
            target: thumbv7em-none-eabihf
          - build: gimlet-rot
            app_name: gimlet-rot
            app_toml: app/gimlet-rot/app.toml
            target: thumbv8m.main-none-eabihf

          - os: ubuntu-latest
            deps: sudo apt-get update && sudo apt-get install binutils-arm-none-eabi libudev-dev
          - os: windows-latest
            deps: |
              Invoke-WebRequest -Uri https://github.com/steveklabnik/arm-none-eabi-objcopy/releases/download/9-2020-q2-update/arm-none-eabi-objcopy.exe -OutFile "$Env:RUNNER_TEMP\arm-none-eabi-objcopy.exe"
              echo $Env:RUNNER_TEMP >> $Env:GITHUB_PATH
    env:
      VCPKGRS_DYNAMIC: 1

    steps:
      # check out our code
      - uses: actions/checkout@v2

      # install rust toolchain
      - name: Install Rust toolchain
        run: rustup show

      - name: Cache build output
        uses: Swatinem/rust-cache@v1

      - name: Cache vcpkg 
        uses: actions/cache@v2
        with:
          path: C:\vcpkg\downloads
          key: ${{ runner.os }}-vcpkg-download-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-download-${{ matrix.os }}-
            ${{ runner.os }}-vcpkg-download-

      # install dependencies
      - name: Install dependencies
        run: '${{ matrix.deps }}'

      # invoke our build
      - uses: actions-rs/cargo@v1
        env:
          RUST_BACKTRACE: 1
        with:
          command: xtask
          args: dist ${{ matrix.app_toml}}

      - name: Fetch Humility 
        uses: dsaltares/fetch-gh-release-asset@0.0.8
        if: matrix.os == 'ubuntu-latest'
        with:
          repo: "oxidecomputer/humility"
          version: "59047694"
          file: "humility"
          target: "target/release/humility"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Humility manifest
        # we need to chmod because all artifacts are marked as non-executable
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install libusb-1.0-0-dev libftdi1-dev
          sudo chmod +x target/release/humility
          target/release/humility -a target/${{ matrix.app_name }}/dist/build-${{ matrix.app_name }}.zip manifest

      # upload the output of our build
      - name: Upload build archive
        uses: actions/upload-artifact@v1
        with:
          name: dist-${{ matrix.os }}-${{ matrix.build }}
          path: target/${{ matrix.app_name }}/dist/build-${{ matrix.app_name }}.zip
