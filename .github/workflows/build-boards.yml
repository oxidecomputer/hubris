name: build-boards.yml (reusable)
on:
  workflow_call:
    inputs:
      os:
        description: OS to build for
        required: true
        type: string
      filter-directories:
        description: Space-separated list of directories to build
        required: false
        default: .
        type: string
      attest:
        description: Whether to attest the built artifacts.
        required: false
        default: false
        type: boolean
      upload-artifacts:
        description: Whether to upload built boards to the artifacts.
        required: false
        default: false
        type: boolean

# Force permissions to be defined at the job level.
permissions: {}

jobs:
  scheduler:
    name: determine job matrix
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v5

      - name: Calculate the CI matrix
        # The $filter_directories bash variable is intentionally not quoted to allow for multiple
        # filtered paths to be provided in the same job.
        run: build/gha-build-boards-matrix.py ${filter_directories} --write-github-output
        id: matrix
        env:
          filter_directories: ${{ inputs.filter_directories }}

  build:
    needs:
      - scheduler
    name: "${{ matrix.job_name }}"
    runs-on: ${{ inputs.os }}
    permissions:
      contents: read
      id-token: write
      attestations: write

    # We have *a lot* of boards, declaratively defined in the repository through their app.toml
    # files. Rather than duplicating the list of them here (inevitably forgetting to add some), we
    # use a script in the `scheduler` job to dynamically calculate the matrix, and inject it here.
    strategy:
      matrix:
        include: ${{ fromJSON(needs.scheduler.outputs.matrix) }}

    env:
      VCPKGRS_DYNAMIC: 1
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        run: |
          rustup show active-toolchain || rustup toolchain install
          rustup show
          rustup component add clippy

      - name: Cache build output
        uses: Swatinem/rust-cache@v2

      - name: Cache vcpkg
        uses: actions/cache@v4
        if: runner.os == 'Windows'
        with:
          path: C:\vcpkg\downloads
          key: ${{ runner.os }}-vcpkg-download-${{ inputs.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-download-${{ inputs.os }}-
            ${{ runner.os }}-vcpkg-download-

      - name: cargo xtask dist
        env:
          RUST_BACKTRACE: 1
        run: cargo xtask dist ${{ matrix.app_toml }}

      - name: Fetch Humility
        uses: dsaltares/fetch-gh-release-asset@master
        if: runner.os == 'Linux'
        with:
          repo: "oxidecomputer/humility"
          version: "59047694"
          file: "humility"
          target: "target/release/humility"

      - name: Test Humility manifest
        # we need to chmod because all artifacts are marked as non-executable
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt-get install -y libusb-1.0-0-dev libftdi1-dev
          sudo chmod +x target/release/humility
          for image in ${images}; do
              mv "target/${name}/dist/${image}/build-${name}-image-${image}.zip" "target/${name}/dist/";
              target/release/humility -a "target/${name}/dist/build-${name}-image-${image}.zip" manifest;
          done
        env:
          name: ${{ matrix.app_name }}
          images: ${{ matrix.image }}

      - name: Clippy
        if: runner.os == 'Linux'
        run: |
          cargo xtask clippy ${{ matrix.app_toml }} -- --deny warnings

      - name: Attestation
        uses: actions/attest-build-provenance@v1
        if: inputs.attest
        with:
          subject-path: target/${{ matrix.app_name }}-image-*.zip

      - name: Upload build archive
        uses: actions/upload-artifact@v4
        if: inputs.upload-artifacts
        with:
          name: dist-${{ inputs.os }}-${{ matrix.app_name }}
          path: target/${{ matrix.app_name }}/dist/build-${{ matrix.app_name }}-image-*.zip
