// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

//! Root of trust for reporting (RoT-R) task.
//!
//! Use the attest-api crate to interact with this task.

#![no_std]
#![no_main]

mod config;

use attest_api::{AttestError, HashAlgorithm};
use config::DataRegion;
use core::slice;
use crypto_common::{typenum::Unsigned, OutputSizeUser};
use hubpack::SerializedSize;
use idol_runtime::{ClientError, Leased, RequestError, W};
use lib_dice::{AliasData, CertData};
use mutable_statics::mutable_statics;
use ringbuf::{ringbuf, ringbuf_entry};
use serde::{Deserialize, Serialize};
use serde_with::serde_as;
use sha3::Sha3_256Core;
use stage0_handoff::{HandoffData, HandoffDataLoadError};
use zerocopy::AsBytes;

// This file is generated by the crate build.rs. It contains instances of
// config::DataRegion structs describing regions of memory configured &
// exposed to this task by the hubris build.
mod build {
    include!(concat!(env!("OUT_DIR"), "/attest-config.rs"));
}

use build::{ALIAS_DATA, CERT_DATA};

#[derive(Copy, Clone, PartialEq)]
enum Trace {
    Cert,
    CertChainLen(u32),
    CertLen(usize),
    AttestError(AttestError),
    HandoffError(HandoffDataLoadError),
    BufSize(usize),
    Index(u32),
    Offset(u32),
    Startup,
    Record(HashAlgorithm),
    BadLease(usize),
    LogLen(u32),
    Log,
    None,
}

ringbuf!(Trace, 16, Trace::None);

/// Load a type implementing HandoffData (and others) from a config::DataRegion.
/// Errors will be reported in the ringbuf and will return in None.
fn load_data_from_region<
    T: for<'a> Deserialize<'a> + HandoffData + SerializedSize,
>(
    region: &DataRegion,
) -> Option<T> {
    // Safety: This memory is setup by code executed before hubris and
    // exposed using the kernel `extern-regions` mechanism. The safety of
    // this code is an extension of our trust in the hubris kernel / build.
    let data = unsafe {
        slice::from_raw_parts(region.address as *mut u8, region.size as usize)
    };

    match T::load_from_addr(data) {
        Ok(d) => Some(d),
        Err(e) => {
            ringbuf_entry!(Trace::HandoffError(e));
            None
        }
    }
}

// the size of the measurements we record
// NOTE: the rust crypto digest traits don't expose consts for the lengths
// of various hash functions
const SHA3_256_DIGEST_SIZE: usize =
    <Sha3_256Core as OutputSizeUser>::OutputSize::USIZE;

// the number of Measurements we can record
const CAPACITY: usize = 16;

// Digest is a fixed length array of bytes
#[serde_as]
#[derive(Clone, Copy, Debug, PartialEq, Serialize, SerializedSize)]
struct Digest<const N: usize>(#[serde_as(as = "[_; N]")] [u8; N]);

impl<const N: usize> Default for Digest<N> {
    fn default() -> Self {
        Digest([0u8; N])
    }
}

type Sha3_256Digest = Digest<SHA3_256_DIGEST_SIZE>;

// Measurement is an enum that can hold any of the supported hash algorithms
#[derive(Clone, Copy, Debug, PartialEq, Serialize, SerializedSize)]
enum Measurement {
    Sha3_256(Sha3_256Digest),
}

impl Measurement {
    fn new(
        algorithm: HashAlgorithm,
        data: idol_runtime::Leased<idol_runtime::R, [u8]>,
    ) -> Result<Self, RequestError<AttestError>> {
        Ok(match algorithm {
            HashAlgorithm::Sha3_256 => {
                if data.len() != SHA3_256_DIGEST_SIZE {
                    ringbuf_entry!(Trace::BadLease(data.len()));
                    return Err(AttestError::BadLease.into());
                }

                let mut digest = Sha3_256Digest::default();
                data.read_range(0..digest.0.len(), &mut digest.0)
                    .map_err(|_| RequestError::went_away())?;

                Measurement::Sha3_256(digest)
            }
        })
    }
}

impl Default for Measurement {
    fn default() -> Self {
        Measurement::Sha3_256(Sha3_256Digest::default())
    }
}

// ArrayVec has everything we need but isn't compatible with hubpack. We only
// need a small subset of its functionality so this saves us some flash.
#[serde_as]
#[derive(Serialize, SerializedSize)]
struct Log<const N: usize> {
    index: u32,
    #[serde_as(as = "[_; N]")]
    measurements: [Measurement; N],
}

impl<const N: usize> Log<N> {
    fn is_full(&self) -> bool {
        self.index as usize == N
    }

    fn push(&mut self, measurement: Measurement) -> bool {
        if !self.is_full() {
            self.measurements[self.index as usize] = measurement;
            self.index += 1;
            true
        } else {
            false
        }
    }
}

impl<const N: usize> Default for Log<N> {
    fn default() -> Self {
        Self {
            index: 0,
            measurements: [Measurement::default(); N],
        }
    }
}

struct AttestServer {
    alias_data: Option<AliasData>,
    buf: &'static mut [u8; Log::<CAPACITY>::MAX_SIZE],
    cert_data: Option<CertData>,
    measurements: Log<CAPACITY>,
}

impl Default for AttestServer {
    fn default() -> Self {
        let buf = mutable_statics! {
            static mut LOG_BUF: [u8; Log::<CAPACITY>::MAX_SIZE] = [|| 0; _];
        };
        Self {
            alias_data: load_data_from_region(&ALIAS_DATA),
            buf,
            cert_data: load_data_from_region(&CERT_DATA),
            measurements: Log::<CAPACITY>::default(),
        }
    }
}

impl AttestServer {
    fn get_cert_bytes_from_index(
        &self,
        index: u32,
    ) -> Result<&[u8], RequestError<AttestError>> {
        let alias_data =
            self.alias_data.as_ref().ok_or(AttestError::NoCerts)?;
        let cert_data = self.cert_data.as_ref().ok_or(AttestError::NoCerts)?;

        match index {
            // Cert chains start with the leaf and stop at the last
            // intermediate before the root. We mimic an array with
            // the leaf cert at index 0, and the last intermediate as
            // the chain length - 1.
            0 => Ok(alias_data.alias_cert.as_bytes()),
            1 => Ok(cert_data.deviceid_cert.as_bytes()),
            2 => Ok(&cert_data.persistid_cert.0.as_bytes()
                [0..cert_data.persistid_cert.0.size as usize]),
            3 => {
                if let Some(cert) = cert_data.intermediate_cert.as_ref() {
                    Ok(&cert.0.as_bytes()[0..cert.0.size as usize])
                } else {
                    Err(AttestError::InvalidCertIndex.into())
                }
            }
            _ => Err(AttestError::InvalidCertIndex.into()),
        }
    }
}

impl idl::InOrderAttestImpl for AttestServer {
    /// Get length of cert chain from Alias to mfg intermediate
    fn cert_chain_len(
        &mut self,
        _: &userlib::RecvMessage,
    ) -> Result<u32, RequestError<AttestError>> {
        let cert_data = self.cert_data.as_ref().ok_or(AttestError::NoCerts)?;
        // The cert chain will vary in length:
        // - kernel w/ feature 'dice-self' will have 3 certs in the chain w/
        // the final cert being a self signed, puf derived identity key
        // - kernel /w feature 'dice-mfg' will have 4 certs in the chain w/
        // the final cert being the intermediate that signs the identity
        // cert
        let chain_len = if cert_data.intermediate_cert.is_none() {
            3
        } else {
            4
        };

        ringbuf_entry!(Trace::CertChainLen(chain_len));
        Ok(chain_len)
    }

    /// Get length of cert at provided index in cert chain
    fn cert_len(
        &mut self,
        _: &userlib::RecvMessage,
        index: u32,
    ) -> Result<u32, RequestError<AttestError>> {
        let len = self.get_cert_bytes_from_index(index)?.len();
        ringbuf_entry!(Trace::CertLen(len));

        let len = u32::try_from(len).map_err(|_| AttestError::CertTooBig)?;

        Ok(len)
    }

    /// Get a cert from the AliasCert chain
    fn cert(
        &mut self,
        _: &userlib::RecvMessage,
        index: u32,
        offset: u32,
        dest: Leased<W, [u8]>,
    ) -> Result<(), RequestError<AttestError>> {
        ringbuf_entry!(Trace::Cert);
        ringbuf_entry!(Trace::Index(index));
        ringbuf_entry!(Trace::Offset(offset));
        ringbuf_entry!(Trace::BufSize(dest.len()));

        let cert = self.get_cert_bytes_from_index(index)?;
        if cert.is_empty() {
            let err = AttestError::InvalidCertIndex;
            ringbuf_entry!(Trace::AttestError(err));
            return Err(err.into());
        }

        let offset = offset as usize;
        // the offset provided must not exceed the length of the cert & there
        // must be sufficient data from the offset to the end of the cert to
        // fill the lease
        if cert.len() < offset || dest.len() > cert.len() - offset {
            let err = AttestError::OutOfRange;
            ringbuf_entry!(Trace::AttestError(err));
            return Err(err.into());
        }

        dest.write_range(0..dest.len(), &cert[offset..offset + dest.len()])
            .map_err(|_| RequestError::Fail(ClientError::WentAway))?;

        Ok(())
    }

    fn record(
        &mut self,
        _: &userlib::RecvMessage,
        algorithm: HashAlgorithm,
        data: idol_runtime::Leased<idol_runtime::R, [u8]>,
    ) -> Result<(), RequestError<AttestError>> {
        ringbuf_entry!(Trace::Record(algorithm));

        if self.measurements.is_full() {
            return Err(AttestError::LogFull.into());
        }

        self.measurements.push(Measurement::new(algorithm, data)?);

        Ok(())
    }

    fn log(
        &mut self,
        _: &userlib::RecvMessage,
        offset: u32,
        dest: Leased<W, [u8]>,
    ) -> Result<(), RequestError<AttestError>> {
        ringbuf_entry!(Trace::Log);

        let offset = offset as usize;
        let log_len = hubpack::serialize(self.buf, &self.measurements)
            .map_err(|_| AttestError::SerializeLog)?;

        if log_len < offset || dest.len() > log_len - offset {
            let err = AttestError::OutOfRange;
            ringbuf_entry!(Trace::AttestError(err));
            return Err(err.into());
        }

        dest.write_range(0..dest.len(), &self.buf[offset..offset + dest.len()])
            .map_err(|_| RequestError::Fail(ClientError::WentAway))?;

        Ok(())
    }

    fn log_len(
        &mut self,
        _: &userlib::RecvMessage,
    ) -> Result<u32, RequestError<AttestError>> {
        let len = hubpack::serialize(self.buf, &self.measurements)
            .map_err(|_| AttestError::SerializeLog)?;
        let len = u32::try_from(len).map_err(|_| AttestError::LogTooBig)?;

        ringbuf_entry!(Trace::LogLen(len));

        Ok(len)
    }
}

#[export_name = "main"]
fn main() -> ! {
    ringbuf_entry!(Trace::Startup);

    let mut buffer = [0; idl::INCOMING_SIZE];
    let mut attest = AttestServer::default();
    loop {
        idol_runtime::dispatch(&mut buffer, &mut attest);
    }
}

mod idl {
    use super::{AttestError, HashAlgorithm};

    include!(concat!(env!("OUT_DIR"), "/server_stub.rs"));
}
