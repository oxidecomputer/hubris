name = "demo-stm32h743-nucleo"
target = "thumbv7em-none-eabihf"
board = "nucleo-h743zi2"
stacksize = 896

[kernel]
path = "."
name = "demo-stm32h7-nucleo"
requires = {flash = 21452, ram = 4096}
#
# For the kernel (and for any task that logs), we are required to enable
# either "itm" (denoting logging/panicking via ARM's Instrumentation Trace
# Macrocell) or "semihosting" (denoting logging/panicking via ARM
# semihosting).  We are biased to ITM because semihosting is excruciatingly
# slow (it is breakpoint based) and has an undesirable failure mode if logging
# output is generated and debugger is not attached (namely, the target stops).
# If one does choose to change this to semihosting for purposes of
# development, be sure to also change it in every task of interest.
#
features = ["h743", "itm"]


[supervisor]
notification = 1

# Flash sections are mapped into flash bank 1 (of 2).
[outputs.flash]
address = 0x08000000
size = 1048576
read = true
execute = true

# RAM sections are currently mapped into DTCM, a small but fast SRAM.
[outputs.ram]
address = 0x20000000
size = 131072
read = true
write = true
execute = false  # let's assume XN until proven otherwise

# Network buffers are placed in sram1, which is directly accessible by the
# Ethernet MAC.
[outputs.sram1]
address = 0x30000000
size = 0x20000
read = true
write = true
dma = true


[tasks.jefe]
path = "../../task/jefe"
name = "task-jefe"
priority = 0
requires = {flash = 8192, ram = 2048}
start = true
features = ["itm"]
stacksize = 1536

[tasks.sys]
path = "../../drv/stm32g0-sys"
name = "drv-stm32g0-sys"
features = ["h743"]
priority = 1
requires = {flash = 2048, ram = 1024}
uses = ["rcc", "gpios1", "gpios2", "gpios3"]
start = true

[tasks.usart_driver]
path = "../../drv/stm32h7-usart"
name = "drv-stm32h7-usart"
features = ["h743"]
priority = 2
requires = {flash = 8192, ram = 1024}
uses = ["usart3"]
start = true
interrupts = {39 = 1}
task-slots = ["sys"]

[tasks.i2c_driver]
path = "../../drv/stm32h7-i2c-server"
name = "drv-stm32h7-i2c-server"
features = ["h743"]
priority = 2
requires = {flash = 16384, ram = 2048}
uses = ["i2c1", "i2c2", "i2c3", "i2c4"]
start = true
task-slots = ["sys"]

[tasks.i2c_driver.interrupts]
33 = 0b0000_0010        # I2C2 event
34 = 0b0000_0010        # I2C2 error

#
# SPI interrupts:
#   spi1 = 35
#   spi2 = 36
#   spi3 = 51
#   spi4 = 84
#   spi5 = 85
#   spi6 = 86
#
[tasks.spi_driver]
path = "../../drv/stm32h7-spi-server"
name = "drv-stm32h7-spi-server"
priority = 2
requires = {flash = 16384, ram = 2048}
features = ["spi1", "h743"]
uses = ["spi1"]
start = true
interrupts = {35 = 1}
stacksize = 880
task-slots = ["sys"]

[tasks.spi_driver.config.spi]
global_config = "spi1"

[tasks.net]
path = "../../task/net"
name = "task-net"
stacksize = 3800
priority = 2
requires = {flash = 65536, ram = 8192, sram1 = 32768}
sections = {eth_bulk = "sram1"}
uses = ["eth", "eth_dma"]
start = true
interrupts = {61 = 0b1}
task-slots = ["sys"]

[tasks.user_leds]
path = "../../drv/user-leds"
name = "drv-user-leds"
features = ["stm32h7"]
priority = 2
requires = {flash = 2048, ram = 1024}
start = true
task-slots = ["sys"]

[tasks.ping]
path = "../../task/ping"
name = "task-ping"
features = ["uart"]
priority = 4
requires = {flash = 8192, ram = 1024}
start = true
task-slots = [{peer = "pong"}, "usart_driver"]

[tasks.pong]
path = "../../task/pong"
name = "task-pong"
priority = 3
requires = {flash = 1024, ram = 1024}
start = true
task-slots = ["user_leds"]

[tasks.udpecho]
path = "../../task/udpecho"
name = "task-udpecho"
priority = 3
requires = {flash = 16384, ram = 8192}
stacksize = 4096
start = true
task-slots = ["net"]

[tasks.hiffy]
path = "../../task/hiffy"
name = "task-hiffy"
features = ["h743", "stm32h7", "itm", "i2c", "gpio", "spi"]
priority = 3
requires = {flash = 32768, ram = 32768 }
stacksize = 2048
start = true
task-slots = ["sys", "i2c_driver"]

[tasks.idle]
path = "../../task/idle"
name = "task-idle"
priority = 5
requires = {flash = 128, ram = 256}
stacksize = 256
start = true

[peripherals.rcc]
address = 0x58024400
size = 1024

[peripherals.gpios1]
address = 0x58020000
size = 0x2000

[peripherals.gpios2]
address = 0x58022000
size = 0x0800

[peripherals.gpios3]
address = 0x58022800
size = 0x0400

[peripherals.spi1]
address = 0x40013000
size = 1024

[peripherals.spi2]
address = 0x40003800
size = 1024

[peripherals.spi3]
address = 0x40003c00
size = 1024

[peripherals.spi4]
address = 0x40013400
size = 1024

[peripherals.spi5]
address = 0x40015000
size = 1024

[peripherals.spi6]
address = 0x58001400
size = 1024

[peripherals.usart3]
address = 0x40004800
size = 1024

[peripherals.i2c1]
address = 0x40005400
size = 1024

[peripherals.i2c2]
address = 0x40005800
size = 1024

[peripherals.i2c3]
address = 0x40005c00
size = 1024

[peripherals.i2c4]
address = 0x58001c00
size = 1024

[peripherals.quadspi]
address = 0x52005000
size = 4096

[peripherals.eth]
address = 0x40028000
size = 0x1000

[peripherals.eth_dma]
address = 0x40029000
size = 0x400

[config]

[[config.i2c.controllers]]
controller = 2

[[config.i2c.controllers.ports.F.pins]]
pins = [ 0, 1 ]
af = 4

#
# To use the Nucleo board as an SPD initiator, uncomment the following:
#
# [[config.i2c.controllers.ports.F.muxes]]
# driver = "ltc4306"
# address = 0b1001_010

[config.spi.spi1]
controller = 1
fifo_depth = 16

[config.spi.spi1.mux_options.cn7_arduino]
outputs = [
    {port = "A", pins = [5], af = 5}, # sck
    {port = "B", pins = [5], af = 5}, # mosi
]
input = {port = "A", pin = 6, af = 5} # miso

[config.spi.spi1.devices.pins]
mux = "cn7_arduino"
cs = {port = "D", pin = 14}
clock_divider = "DIV16"


[config.net]

[config.net.sockets.echo]
kind = "udp"
owner = {name = "udpecho", notification = 1}
port = 7
tx = { packets = 3, bytes = 1024 }
rx = { packets = 3, bytes = 1024 }
