[package]
name = "userlib"
version = "0.1.0"
edition = "2018"

[features]
panic-messages = []
log-itm = []
log-semihosting = []
log-null = []

[dependencies]
abi = {path = "../abi"}
bstringify = "0.1.2"
paste = "1"
serde = { version = "1.0.114", default-features = false }
ssmarshal = { version = "1.0.0", default-features = false }
zerocopy = "0.6.1"
num-traits = { version = "0.2.12", default-features = false }
unwrap-lite = { path = "../../lib/unwrap-lite" }
cfg-if = "1"
armv6m-atomic-hack = {path = "../../lib/armv6m-atomic-hack"}

#
# In order to use macros as discriminants in enums that make use of derive
# macros (e.g., AsBytes, FromPrimitive), we need the syn crate to have "full"
# enabled. The easiest way to do this is to use num-derive's "full-syntax",
# which passes "full" through to syn.
#
num-derive = { version = "0.3.0", features = [ "full-syntax" ] }

[target.thumbv7em-none-eabihf.dependencies]
# Note: we don't use cortex-m directly, this is here to ensure that the
# feature is consistently specified in all tasks, to reduce overbuilding
# of the PACs.
cortex-m = {version = "0.7", features = ["inline-asm"]}

# We're repeating this a bazillion times because Cargo only gives us two
# options: (1) define on the entire target triple, or (2) define on
# target_arch, which Cargo rounds down to "arm". i.e. we can't detect
# Cortex-Ms specifically. Thanks, Cargo.
[target.thumbv7m-none-eabi.dependencies]
cortex-m = {version = "0.7", features = ["inline-asm"]}
[target.thumbv7em-none-eabi.dependencies]
cortex-m = {version = "0.7", features = ["inline-asm"]}
[target.thumbv6m-none-eabi.dependencies]
cortex-m = {version = "0.7", features = ["inline-asm"]}
[target."thumbv8m.main-none-eabihf".dependencies]
cortex-m = {version = "0.7", features = ["inline-asm"]}

[build-dependencies]
build-util = {path = "../../build/util"}

[lib]
test = false
bench = false
