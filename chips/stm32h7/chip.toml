[rcc]
address = 0x58024400
size = 1024

[gpios]
address = 0x58020000
size = 0x4000

[spi1]
address = 0x40013000
size = 1024
interrupts = { irq = 35 }

[spi2]
address = 0x40003800
size = 1024
interrupts = { irq = 36 }

[spi3]
address = 0x40003c00
size = 1024
interrupts = { irq = 51 }

[spi4]
address = 0x40013400
size = 1024
interrupts = { irq = 84 }

[spi5]
address = 0x40015000
size = 1024
interrupts = { irq = 85 }

[spi6]
address = 0x58001400
size = 1024
interrupts = { irq = 86 }

[syscfg]
address = 0x58000400
size = 1024

[exti]
address = 0x58000000
size = 1024
interrupts = { exti0 = 6, exti1 = 7, exti2 = 8, exti3 = 9, exti4 = 10, exti9_5 = 23, exti15_10 = 40 }

[usart1]
address = 0x40011000
size = 1024
interrupts = { irq = 37 }

[usart2]
address = 0x40004400
size = 1024
interrupts = { irq = 38 }

[usart3]
address = 0x40004800
size = 1024
interrupts = { irq = 39 }

[uart4]
address = 0x40004c00
size = 1024
interrupts = { irq = 52 }

[uart5]
address = 0x40005000
size = 1024
interrupts = { irq = 53 }

[usart6]
address = 0x40011400
size = 1024
interrupts = { irq = 71 }

[uart7]
address = 0x40007800
size = 1024
interrupts = { irq = 82 }

[uart8]
address = 0x40007c00
size = 1024
interrupts = { irq = 83 }

[i2c1]
address = 0x40005400
size = 1024
interrupts = { event = 31, error = 32 }

[i2c2]
address = 0x40005800
size = 1024
interrupts = { event = 33, error = 34 }

[i2c3]
address = 0x40005c00
size = 1024
interrupts = { event = 72, error = 73 }

[i2c4]
address = 0x58001c00
size = 1024
interrupts = { event = 95, error = 96 }

[quadspi]
address = 0x52005000
size = 4096
interrupts = { irq = 92 }

[eth]
address = 0x40028000
size = 0x2000
interrupts = { irq = 61 }

[hash]
address = 0x48021400
size = 4096
interrupts = { irq = 80 }

[system_flash]
address = 0x1FF00000
size = 0x20000

[rng]
address = 0x48021800
size = 4096

[flash_controller]
address = 0x52002000
size = 0x2000
interrupts = { irq = 4 }

[tim16]
address = 0x40014400
size = 0x400
interrupts = { irq = 117 }

[dbgmcu]
address = 0x5C001000
size = 128 # 96 bytes of actual data, rounding up to a power of two

#[cryp]
#address = 0x48021000
#size = 4096

# Control registers for the memory controller, _not_ the memory itself.
[fmc]
address = 0x52004000
size = 0x1000

# NOTE: this defines the chunk of memory used for memory-mapped peripherals,
# like we do for certain FPGAs.  You should not use it directly; instead, use an
# `[fmc]` configuration block in your manifest to generate fine-grained memory
# regions for each memory-mapped peripheral, based on the FPGA's top-level
# peripheral map.
#
# This is also NOT the right way to use FMC-attached devices as RAM! For that
# you probably want an extern-region instead. Why, you ask? Because this is a
# peripheral mapping, and will set up this section of the address space as
# bypassing the cache, not coalescing stores, and so forth. This is what you
# want for memory mapped registers; it is _not_ what you want for RAM, at least
# if you want performance to be halfway reasonable.
[fmc_nor_psram_bank_1]
address = 0x60000000
size = 0x10000000
