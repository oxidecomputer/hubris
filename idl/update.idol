// Image update API

Interface(
    name: "Update",
    ops: {
        "block_size": (
            doc: "Get the block size for the update API. This is the length expected for the `write_one_block` call",
            args: { },
            reply: Result(
                ok: "usize",
                err: CLike("UpdateError"),
            ),
        ),
        "prep_image_update": (
            doc: "Do any necessary preparation for writing the image. This may include erasing flash and unlocking registers",
            args : {
                "image_type": (
                    type: "UpdateTarget",
                    recv: FromPrimitive("u8"),
                )
            },
            reply : Result(
                ok: "()",
                err: CLike("UpdateError"),
            ),
        ),
        "write_one_block": (
            doc: "Write a single block of an update image to the designated location.",
            args: {
                "block_num" : "usize",
            },
            leases : {
                "block": (type: "[u8]", read: true, max_len: Some(1024)),
            },
            reply: Result (
                ok: "()",
                err: CLike("UpdateError"),
            ),
        ),
        "abort_update": (
            doc: "Cancel the current update in progress. Must call prep_image_update again before restarting.",
            args : { },
            reply : Result(
                ok: "()",
                err: CLike("UpdateError"),
            ),
        ),
        "finish_image_update": (
            doc: "Do any necessary work post image write",
            args : { },
            reply : Result(
                ok: "()",
                err: CLike("UpdateError"),
            ),
        ),
        "current_version": (
            doc: "Get the current image version",
            args : { },
            reply : Simple("ImageVersion"),
            idempotent: true,
            encoding: Hubpack
        ),
        "status": (
            doc: "Get info about installed images",
            args: { },
            reply : Simple("UpdateStatus"),
            idempotent: true,
            encoding: Hubpack
        ),
        "read_image_caboose": (
            doc: "Reads the specified tag from the bank2 caboose",
            args: {
                "name": "[u8; 4]",
            },
            leases: {
                "data": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "u32",
                err: CLike("CabooseError"),
            ),
            idempotent: true,
        ),
    }
)
