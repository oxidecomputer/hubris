// SP to RoT communications over SPI

Interface(
    name: "SpRot",
    ops: {
        "send_recv": (
            doc: "Send then receive a message from the RoT",
            args: {
                "msgtype": (
                    type: "MsgType",
                    recv: FromPrimitive("u8"),
                ),
            },
            leases: {
                "message": (type: "[u8]", read: true),
                "response": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "Received",
                err: CLike("SprotError"),
            ),
        ),
        "send_recv_retries": (
            doc: "Send then receive a message from the RoT. Retry on recoverable errors.",
            args: {
                "msgtype": (
                    type: "MsgType",
                    recv: FromPrimitive("u8"),
                ),
                "attempts": (
                    type: "u16",
                ),
            },
            leases: {
                "message": (type: "[u8]", read: true),
                "response": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "Received",
                err: CLike("SprotError"),
            ),
        ),
    "status": (
        doc: "Return untrusted status from RoT",
        reply: Result(
            ok: "Status",
            err: CLike("SprotError"),
        ),
        encoding: Ssmarshal,
    ),
        "pulse_cs": (
            doc: "SPI Chip Select assert, delay, deassert",
            args: {
                "delay": "u16",
            },
            reply: Result(
                ok: "PulseStatus",
                err: CLike("SprotError"),
            ),
        ),
        "rot_sink": (
            doc: "SP locally generates and sends count buffers of size to RoT",
            args: {
                "count": "u16",
                "size": "u16",
            },
            reply: Result(
                ok: "SinkStatus",
                err: CLike("SprotError"),
            ),
        ),

        // The RoT update API is copy and pasted from idl/update.idol.
        "block_size": (
            doc: "Get the block size for the update API. This is the length expected for the `write_one_block` call",
            args: { },
            reply: Result(
                ok: "usize",
                err: CLike("SprotError"),
            ),
        ),
        "prep_image_update": (
            doc: "Do any necessary preparation for writing the image. This may include erasing flash and unlocking registers",
            args : {
                "image_type": (
                  type: "UpdateTarget",
                  recv: FromPrimitive("u8"),
                )
            },
            reply : Result(
                ok: "()",
                err: CLike("SprotError"),
            ),
        ),
        "write_one_block": (
            doc: "Write a single block of an update image to the designated location.",
            args: { 
                "block_num" : "u32",
            },
            leases : {
                "block": (type: "[u8]", read: true, max_len: Some(1024)),
            },
            reply: Result (
                ok: "()",
                err: CLike("SprotError"),
            ),
        ),
        "abort_update": (
            doc: "Cancel the current update in progress. Must call prep_image_update again before restarting.",
            args : { },
            reply : Result(
                ok: "()",
                err: CLike("SprotError"),
            ),
        ),
        "finish_image_update": (
            doc: "Do any necessary work post image write",
            args : { },
            reply : Result(
                ok: "()",
                err: CLike("SprotError"),
            ),
        ),
        "current_version": (
          doc: "Get the current image version",
          args : { },
          reply : Result(
            ok: "ImageVersion",
            err: CLike("SprotError"),
          ),
        ),
    }
)
