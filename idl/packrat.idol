// Packrat server IPC interface

Interface(
    name: "Packrat",
    ops: {
        "get_mac_address_block": (
            doc: "Get the cached MAC address block",
            reply: Result(
                ok: "MacAddressBlock",
                err: CLike("CacheGetError"),
            ),
            idempotent: true,
        ),
        "set_mac_address_block": (
            doc: "Set the cached MAC address block",
            args: {
                "macs": "MacAddressBlock",
            },
            reply: Result(
                ok: "()",
                err: CLike("CacheSetError"),
            ),
            idempotent: true,
        ),
        "get_identity": (
            doc: "Get the cached board identity",
            reply: Result(
                ok: "VpdIdentity",
                err: CLike("CacheGetError"),
            ),
            idempotent: true,
        ),
        "set_identity": (
            doc: "Set the cached board identity",
            args: {
                "macs": "VpdIdentity",
            },
            reply: Result(
                ok: "()",
                err: CLike("CacheSetError"),
            ),
            idempotent: true,
        ),
        "get_next_boot_host_startup_options": (
            doc: "Get the value for host OS startup options we will give to the host the next time it requests them from us. This may or may not match the startup options used the most recent time the host OS boots, as the options may have changed in the meantime.",
            reply: Simple("HostStartupOptions"),
            idempotent: true,
        ),
        "set_next_boot_host_startup_options": (
            doc: "Set the value for host OS startup options we will give to the host the next time it requests them from us.",
            args: {
                "startup_options": "HostStartupOptions",
            },
            reply: Simple("()"),
            idempotent: true,
        ),
        "remove_spd": (
            doc: "Mark an SPD as absent",
            args: {
                "index": "u8",
            },
            reply: Simple("()"),
            idempotent: true,
        ),
        "set_spd_eeprom": (
            doc: "Record SPD EEPROM data",
            args: {
                "index": "u8",
                "offset": "usize",
            },
            leases: {
                "data": (type: "[u8]", read: true, max_len: Some(256)),
            },
            reply: Simple("()"),
            idempotent: true,
        ),
        "get_spd_present": (
            doc: "Return whether the device at `index` is present. Return value is dependent on prior calls to `set_spd_eeprom`.",
            args: {
                "index": "u8",
            },
            reply: Simple("bool"),
            idempotent: true,
        ),
        "get_spd_data": (
            doc: "Return the value of the SPD data byte from device `index` at offset `offset`. Return value is dependent on prior calls to `set_spd_eeprom`.",
            args: {
                "index": "u8",
                "offset": "usize",
            },
            reply: Simple("u8"),
            idempotent: true,
        ),
        "get_full_spd_data": (
            doc: "Read an entire SPD EEPROM for the given device",
            args: {
                "index": "u8",
            },
            leases: {
                "data": (type: "[u8]", write: true),
            },
            reply: Simple("()"),
            idempotent: true,
        ),
        "set_ereport_restart_id": (
            doc: "Set the restart ID for ereports",
            args: {
                "restart_id": "u128",
            },
            reply: Result(
                ok: "()",
                err: CLike("CacheSetError"),
            ),
            idempotent: true,
        ),
        "deliver_ereport": (
            doc: "Hand an encoded ereport to packrat for buffering.",
            args: {
            },
            leases: {
                "data": (type: "[u8]", read: true, max_len: Some(1024)),
            },
            reply: Result(
                ok: "()",
                err: CLike("EreportWriteError"),
            ),
            idempotent: true,
        ),
        "read_ereports": (
            doc: "Read ereports starting with a watermark (ENA) value",
            args: {
                "request_id": "ereport_messages::RequestIdV0",
                "restart_id": "ereport_messages::RestartId",
                "start_ena": "ereport_messages::Ena",
                "limit": "u8",
                "committed_ena": "ereport_messages::Ena",
            },
            leases: {
                "data": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "usize",
                err: CLike("EreportReadError"),
            ),
            idempotent: true,
        ),
    },
)
