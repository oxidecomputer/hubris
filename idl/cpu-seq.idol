// CPU Sequencer API

Interface(
    name: "Sequencer",
    ops: {
        "get_state": (
            doc: "Return the power state",
            args: {},
            reply: Simple((
                type: "drv_cpu_power_state::PowerState",
                recv: FromPrimitive("u8"),
            )),
            idempotent: true,
        ),
        "set_state": (
            doc: "Set the power state without providing a reason (legacy).",
            args: {
                "state": (
                    type: "drv_cpu_power_state::PowerState",
                    recv: FromPrimitive("u8"),
                ),
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),
        "set_state_with_reason": (
            doc: "Set the power state",
            args: {
                "state": (
                    type: "drv_cpu_power_state::PowerState",
                    recv: FromPrimitive("u8"),
                ),
                "reason": (
                    type: "StateChangeReason",
                    recv: FromPrimitive("u8"),
                ),
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),
        "send_hardware_nmi": (
            doc: "Triggers a hardware NMI by toggling LPC_SMI_L",
            args: {},
            reply: Result(
                ok: "()",
                err: ServerDeath,
            ),
        ),
        "read_fpga_regs": (
            doc: "Raw read of the FPGA registers",
            args: {},
            reply: Simple("[u8; 64]"),
            idempotent: true,
        ),
    },
)
