// Auxiliary Flash API

Interface(
    name: "AuxFlash",
    ops: {
        "read_id": (
            doc: "reads the chip ID from the auxiliary flash chip",
            reply: Result(
                ok: "AuxFlashId",
                err: CLike("AuxFlashError"),
            ),
        ),
        "slot_count": (
            doc: "returns the number of slots in our auxiliary flash",
            reply: Result(
                ok: "u32",
                err: CLike("AuxFlashError"),
            ),
        ),
        "slot_size": (
            doc: "returns the size of a slot, in bytes",
            reply: Result(
                ok: "u32",
                err: CLike("AuxFlashError"),
            ),
        ),
        "read_status": (
            doc: "reads the auxiliary flash chip's status register",
            reply: Result(
                ok: "u8",
                err: CLike("AuxFlashError"),
            ),
        ),
        "erase_slot": (
            doc: "erases the given slot",
            args: {
                "slot": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("AuxFlashError"),
            ),
        ),
        "slot_sector_erase": (
            doc: "erase a particular sector within a slot",
            args: {
                "slot": "u32",
                "offset": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("AuxFlashError"),
            ),
        ),
        "read_slot_chck": (
            doc: "reads and verifies the CHCK field in an auxiliary flash slot",
            args: {
                "slot": "u32",
            },
            reply: Result(
                ok: "AuxFlashChecksum",
                err: CLike("AuxFlashError"),
            ),
        ),
        "write_slot_with_offset": (
            doc: "writes to a particular memory offset in a slot (must be a multiple of 256)",
            args: {
                "slot": "u32",
                "offset": "u32",
            },
            leases: {
                "data": (type: "[u8]", read: true),
            },
            reply: Result(
                ok: "()",
                err: CLike("AuxFlashError"),
            ),
        ),
        "read_slot_with_offset": (
            doc: "reads from a particular memory offset in a slot (must be a multiple of 256)",
            args: {
                "slot": "u32",
                "offset": "u32",
            },
            leases: {
                "data": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "()",
                err: CLike("AuxFlashError"),
            ),
        ),
        "scan_and_get_active_slot": (
            doc: "DEPRECATED; use active_slot() instead",
            reply: Result(
                ok: "u32",
                err: CLike("AuxFlashError"),
            ),
        ),
        "get_active_slot": (
            doc: "Returns the slot containing the checksum that matches the one in the Hubris image",
            reply: Result(
                ok: "u32",
                err: CLike("AuxFlashError"),
            ),
        ),
        "ensure_redundancy": (
            doc: "If necessary, flashes data from the active slot to the spare slot",
            reply: Result(
                ok: "()",
                err: CLike("AuxFlashError"),
            ),
        ),
        "get_blob_by_tag": (
            doc: "Scans the active slot for a blob with the given tag",
            args: {
                "name": "[u8; 4]",
            },
            reply: Result(
                ok: "AuxFlashBlob",
                err: CLike("AuxFlashError"),
            ),
        ),
        "get_blob_by_u32": (
            doc: "Scans the active slot for a blob with the given tag, as a u32",
            args: {
                "name": "u32",
            },
            reply: Result(
                ok: "AuxFlashBlob",
                err: CLike("AuxFlashError"),
            ),
        ),
    }
)
