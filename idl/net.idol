// Netstack IPC interface

Interface(
    name: "Net",
    ops: {
        "recv_packet": (
            encoding: Ssmarshal,
            doc: "Unqueues an incoming packet from a socket.",
            args: {
                "socket": "SocketName",
                "large_payload_behavior": "LargePayloadBehavior",
            },
            leases: {
                "payload": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "UdpMetadata",
                err: CLike("RecvError"),
            ),
        ),
        "send_packet": (
            encoding: Ssmarshal,
            doc: "Queues an outgoing packet into a socket.",
            args: {
                "socket": "SocketName",
                "metadata": "UdpMetadata",
            },
            leases: {
                "payload": (type: "[u8]", read: true),
            },
            reply: Result(
                ok: "()",
                err: CLike("SendError"),
            ),
        ),
        "smi_read": (
            doc: "Reads a register from a SMI-attached device.",
            args: {
                "phy": "u8",
                "register": "u8",
            },
            reply: Result(
                ok: "u16",
                err: ServerDeath,
            ),
        ),
        "smi_write": (
            doc: "Reads a register from a SMI-attached device.",
            args: {
                "phy": "u8",
                "register": "u8",
                "value": "u16",
            },
            reply: Result(
                ok: "()",
                err: ServerDeath,
            ),
        ),
        "read_phy_reg": (
            doc: "Read a register from the PHY associated with a particular port",
            args: {
                "port": "u8",
                "page": "u16",
                "reg": "u8",
            },
            reply: Result(
                ok: "u16",
                err: CLike("PhyError"),
            ),
        ),
        "write_phy_reg": (
            doc: "Writes a register in the PHY associated with a particular port",
            args: {
                "port": "u8",
                "page": "u16",
                "reg": "u8",
                "value": "u16",
            },
            reply: Result(
                ok: "()",
                err: CLike("PhyError"),
            ),
        ),
    },
)
