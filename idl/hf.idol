// Gimlet Host Flash API

Interface(
    name: "HostFlash",
    ops: {
        "read_id": (
            args: {},
            reply: Result(
                ok: "[u8; 20]",
                err: CLike("HfError"),
            ),
        ),
        "capacity": (
            doc: "Return the flash capacity in bytes.",
            args: {},
            reply: Result(
                ok: "usize",
                err: CLike("HfError"),
            ),
        ),
        "read_status": (
            args: {},
            reply: Result(
                ok: "u8",
                err: CLike("HfError"),
            ),
        ),
        "bulk_erase": (
            args: {
                "protect": (
                    type: "HfProtectMode",
                    recv: FromPrimitive("u8"),
                ),
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
        "page_program": (
            args: {
                "address": "u32",
                "protect": (
                    type: "HfProtectMode",
                    recv: FromPrimitive("u8"),
                ),
            },
            leases: {
                "data": (type: "[u8]", read: true, max_len: Some(256)),
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
        "page_program_dev": (
            description: "programs a page of flash on the specific dev, restoring the previous dev before returning",
            args: {
                "dev": (
                    type: "HfDevSelect",
                    recv: FromPrimitive("u8"),
                ),
                "address": "u32",
                "protect": (
                    type: "HfProtectMode",
                    recv: FromPrimitive("u8"),
                ),
            },
            leases: {
                "data": (type: "[u8]", read: true, max_len: Some(256)),
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
        "read": (
            args: {
                "address": "u32",
            },
            leases: {
                "data": (type: "[u8]", write: true, max_len: Some(256)),
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
        "sector_erase": (
            args: {
                "address": "u32",
                "protect": (
                    type: "HfProtectMode",
                    recv: FromPrimitive("u8"),
                ),
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
        "sector_erase_dev": (
            description: "erases a sector of flash on the specific dev, restoring the previous dev before returning",
            args: {
                "dev": (
                    type: "HfDevSelect",
                    recv: FromPrimitive("u8"),
                ),
                "address": "u32",
                "protect": (
                    type: "HfProtectMode",
                    recv: FromPrimitive("u8"),
                ),
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
        "get_mux": (
            doc: "Return the state of the mux",
            reply: Result(
                ok: (
                    type: "HfMuxState",
                    recv: FromPrimitive("u8"),
                ),
                err: CLike("HfError"),
            ),
        ),
        "set_mux": (
            doc: "Set the state of the mux",
            args: {
                "state": (
                    type: "HfMuxState",
                    recv: FromPrimitive("u8"),
                )
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
        "get_dev": (
            doc: "Returns the selected device",
            reply: Result(
                ok: (
                    type: "HfDevSelect",
                    recv: FromPrimitive("u8"),
                ),
                err: CLike("HfError"),
            ),
        ),
        "set_dev": (
            doc: "Sets the selected device",
            args: {
                "dev": (
                    type: "HfDevSelect",
                    recv: FromPrimitive("u8"),
                ),
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
        "check_dev": (
            doc: "Check whether the given dev is valid",
            args: {
                "dev": (
                    type: "HfDevSelect",
                    recv: FromPrimitive("u8"),
                ),
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
        "hash": (
            args: {
                "address": "u32",
                "len": "u32",
            },
            reply: Result(
                ok: "[u8; drv_hash_api::SHA256_SZ]",
                err: CLike("HfError"),
            ),
        ),
        "get_persistent_data": (
            doc: "looks up persistent configuration data",
            reply: Result(
                ok: "HfPersistentData",
                err: CLike("HfError"),
            ),
            encoding: Hubpack,
        ),
        "write_persistent_data": (
            doc: "stores persistent configuration data to flash",
            args: {
                "dev_select": (
                    type: "HfDevSelect",
                    recv: FromPrimitive("u8"),
                ),
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
        "bonus_page_program": (
            description: "programs a page into the bonus region of host flash",
            args: {
                "address": "u32",
            },
            leases: {
                "data": (type: "[u8]", read: true, max_len: Some(256)),
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
        "bonus_read": (
            description: "reads from the bonus region of host flash",
            args: {
                "address": "u32",
            },
            leases: {
                "data": (type: "[u8]", write: true, max_len: Some(256)),
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
        "bonus_sector_erase": (
            description: "erases a 64 KiB sector from the bonus region of host flash",
            args: {
                "address": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("HfError"),
            ),
        ),
    },
)
