// Interface for RoT to SP control

Interface(
    name: "SpCtrl",
    ops: {
        "read": (
            doc: "Read bytes from device `device_index` into `sink`, shifting out 1s.",
            args: {
                "addr": "u32",
            },
            leases: {
                "sink": (type: "[u8]", write: true, max_len: Some(4096)),
            },
            reply: Result(
                ok: "()",
                err: CLike("SpCtrlError"),
            ),
        ),
        "write": (
            doc: "Write bytes from `source` and to device `device_index`, ignoring whatever's sent back.",
            args: {
                "addr": "u32",
            },
            leases: {
                "source": (type: "[u8]", read: true, max_len: Some(4096)),
            },
            reply: Result(
                ok: "()",
                err: CLike("SpCtrlError"),
            ),
        ),
        "setup": (
            doc: "Perform initialization necessary for SP control. Must be called before other commands",
            args: {
            },
            reply: Result(
                ok: "()",
                err: CLike("SpCtrlError"),
            ),
        ),
        "read_transaction_start": (
            doc: "Start a read of sequential bytes",
            args: {
                "start": "u32",
                "end": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("SpCtrlError"),
            ),
        ),
        "read_transaction": (
            doc: "Read the next bytes from the programmed transaction",
            args: {
            },
            leases: {
                "sink": (type: "[u8]", write: true, max_len: Some(4096)),
            },
            reply: Result(
                ok: "()",
                err: CLike("SpCtrlError"),
            ),
        ),
        "halt": (
            doc: "Halts the target",
            args: {
            },
            reply: Result(
                ok: "()",
                err: CLike("SpCtrlError"),
            ),
        ),
        "resume": (
            doc: "Resumes the target",
            args: {
            },
            reply: Result(
                ok: "()",
                err: CLike("SpCtrlError"),
            ),
        ),
        "read_core_register": (
            doc: "Reads a core register",
            args: {
                "register": "u16",
            },
            reply: Result(
                ok: "u32",
                err: CLike("SpCtrlError"),
            )
        ),
        "enable_sp_slot_watchdog": (
            doc: "Enable a watchdog that will reset the SP into the inactive slot",
            args: {
                "time_ms" : "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("SpCtrlError"),
            ),
        ),
        "disable_sp_slot_watchdog": (
            doc: "Disable the SP slot watchdog",
            reply: Simple("()"),
            idempotent: true,
        ),
        "db_reset_sp": (
            doc: "Debugging: Assert SP RESET with specified delay",
            args: {
                "delay_ms": "u32",
            },
            reply: Simple("()"),
            idempotent: true,
        )
    }
)
