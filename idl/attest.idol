// Interface to 'attest' task.

Interface(
    name: "Attest",
    ops: {
        "cert_chain_len": (
            doc: "Get the number of certs in the attestation cert chain",
            args: {},
            reply: Result(
                ok: "u32",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "cert": (
            doc: "Get a cert from the RoT-R",
            args: {
                "index" : "u32",
                "offset" : "u32",
            },
            leases: {
                "dest": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "()",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "cert_len": (
            doc: "Get length of a cert in the cert chain",
            args: {
                "index" : "u32",
            },
            reply: Result(
                ok: "u32",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "record": (
            doc: "Record a measurment",
            args: {
                "algorithm": "HashAlgorithm",
            },
            leases: {
                "data": (type: "[u8]", read: true),
            },
            reply: Result(
                ok: "()",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
        ),
        "log": (
            doc: "Get the measurement log",
            args: {
                "offset" : "u32",
            },
            leases: {
                "dest": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "()",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
        ),
        "log_len": (
            doc: "Get length of the serialized measurement log",
            args: {},
            reply: Result(
                ok: "u32",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "attest": (
            doc: "Get an attestation",
            args: {},
            leases: {
                "nonce": (type: "[u8]", read: true, max_len: Some(128)),
                "dest": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "()",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
        ),
        "attest_len": (
            doc: "Get the length of an attestation",
            args: {},
            reply: Result(
                ok: "u32",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "tq_cert_chain_len": (
            doc: "Get the number of certs in the tq cert chain",
            args: {},
            reply: Result(
                ok: "u32",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "tq_cert": (
            doc: "Get a cert from the TQ cert chain",
            args: {
                "index" : "u32",
                "offset" : "u32",
            },
            leases: {
                "dest": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "()",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "tq_cert_len": (
            doc: "Get length of a cert in the tq cert chain",
            args: {
                "index" : "u32",
            },
            reply: Result(
                ok: "u32",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "tq_sign": (
            doc: "sign a hash using the tq key",
            args: {},
            leases: {
                "hash": (type: "[u8]", read: true, max_len: Some(32)),
                "dest": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "()",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
        ),
        "tq_sign_len": (
            doc: "Get the length of a TQ signature",
            args: {},
            reply: Result(
                ok: "u32",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "reset": (
            doc: "Reset the attestation log",
            reply: Result(
                ok: "()",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
        ),
        "reset_and_record": (
            doc: "Reset the attestation log and then record a measurment",
            args: {
                "algorithm": "HashAlgorithm",
            },
            leases: {
                "data": (type: "[u8]", read: true),
            },
            reply: Result(
                ok: "()",
                err: Complex("AttestError"),
            ),
            encoding: Hubpack,
        ),

    }
)
