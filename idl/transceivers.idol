// Transceivers API

Interface(
    name: "Transceivers",
    ops: {
        "get_modules_status": (
            doc: "Collect the status of each modules control and status signals",
            reply: Result(
                ok: "ModulesStatus",
                err: CLike("TransceiversError"),
            ),
        ),

        "port_enable_power": (
            doc: "Enable the hot swap controller for each port in the mask",
            args: {
                "logical_port_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "port_disable_power": (
            doc: "Disable the hot swap controller for each port in the mask",
            args: {
                "logical_port_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "port_assert_reset": (
            doc: "Assert ResetL for each port in the mask",
            args: {
                "logical_port_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "port_deassert_reset": (
            doc: "Deassert ResetL for each port in the mask",
            args: {
                "logical_port_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "port_assert_lpmode": (
            doc: "Assert LpMode for each port in the mask",
            args: {
                "logical_port_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "port_deassert_lpmode": (
            doc: "Deassert LpMode for each port in the mask",
            args: {
                "logical_port_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "port_clear_fault": (
            doc: "Clear the fault for each port in the mask",
            args: {
                "logical_port_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "setup_i2c_read": (
            doc: "Setup a read operation over I2C to all modules whose bit is set in the mask",
            args: {
                "reg": "u8",
                "num_bytes": "u8",
                "logical_port_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "setup_i2c_write": (
            doc: "Setup a write operation over I2C to all modules whose bit is set in the mask",
            args: {
                "reg": "u8",
                "num_bytes": "u8",
                "logical_port_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "get_i2c_read_buffer": (
            doc: "Get up to 128 bytes from the I2C read buffer for a given port number (0 to 31)",
            args: {
                "logical_port": "u8",
            },
            leases: {
                "dest": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "set_i2c_write_buffer": (
            doc: "Set up to 128 bytes in the I2C write buffer of all modules. Note that these will not be written without a call to setup_i2c_op.",
            leases: {
                "data": (type: "[u8]", read: true),
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),
    }
)
