// Gimlet Sequencer API

Interface(
    name: "Sequencer",
    ops: {
        "tofino_seq_policy": (
            doc: "Return the active sequencer policy for Tofino",
            args: {},
            reply: Result(
                ok: (
                    type: "TofinoSequencerPolicy",
                    recv: FromPrimitive("u8"),
                ),
                err: CLike("SeqError"),
            ),
        ),
        "set_tofino_seq_policy": (
            doc: "Set the power state",
            args: {
                "policy": (
                    type: "TofinoSequencerPolicy",
                    recv: FromPrimitive("u8"),
                )
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),
        "tofino_seq_state": (
            doc: "Return the Tofino sequencer state",
            args: {},
            reply: Result(
                ok: (
                    type: "TofinoSeqState",
                    recv: FromPrimitive("u8"),
                ),
                err: CLike("SeqError"),
            ),
        ),
        "tofino_seq_error": (
            doc: "Return the Tofino sequencer error, if any",
            args: {},
            reply: Result(
                ok: (
                    type: "TofinoSeqError",
                    recv: FromPrimitive("u8"),
                ),
                err: CLike("SeqError"),
            ),
        ),
        "tofino_seq_error_step": (
            doc: "Return the step when a Tofino sequencer error occured, if any",
            reply: Result(
                ok: (
                    type: "TofinoSeqStep",
                    recv: FromPrimitive("u8"),
                ),
                err: CLike("SeqError"),
            ),
        ),
        "clear_tofino_seq_error": (
            doc: "Clear the Tofino sequencer error state",
            args: {},
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),
        "tofino_power_rails": (
            doc: "Return the Tofino sequencer power rail registers",
            reply: Result(
                ok: "[drv_fpga_user_api::power_rail::RawPowerRailState; 6]",
                err: CLike("SeqError"),
            ),
        ),
        "tofino_pcie_hotplug_ctrl": (
            doc: "Return the PCIe hotplug control register",
            reply: Result(
                ok: "u8",
                err: CLike("SeqError"),
            ),
        ),
        "set_tofino_pcie_hotplug_ctrl": (
            doc: "Set bits in the Tofino PCIe endpoint CTRL register",
            args: {
                "mask": "u8",
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),
        "clear_tofino_pcie_hotplug_ctrl": (
            doc: "Clear bits in the Tofino PCIe endpoint CTRL register",
            args: {
                "mask": "u8",
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),
        "tofino_pcie_hotplug_status": (
            doc: "Return the PCIe hotplug status register",
            reply: Result(
                ok: "u8",
                err: CLike("SeqError"),
            ),
        ),
        "tofino_pcie_reset": (
            doc: "Return the state of Tofino PCIe reset",
            reply: Result(
                ok: (
                    type: "TofinoPcieReset",
                    recv: FromPrimitive("u8"),
                ),
                err: CLike("SeqError"),
            ),
        ),
        "set_tofino_pcie_reset": (
            doc: "Return the state of Tofino PCIe reset",
            args: {
                "reset": (
                    type: "TofinoPcieReset",
                    recv: FromPrimitive("u8"),
                ),
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),
        "tofino_pcie_link_up": (
            doc: "Return whether or not the Tofino PCIe link is up",
            reply: Simple("bool"),
            idempotent: true,
        ),

        "is_clock_config_loaded": (
            args: {},
            reply: Simple("bool"),
            idempotent: true,
        ),

        "load_clock_config": (
            args: {},
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),

        "front_io_board_present": (
            args: {},
            reply: Simple("bool"),
            idempotent: true,
        ),
        "front_io_board_ready": (
            args: {},
            reply: Result(
                ok: "bool",
                err: CLike("SeqError"),
            ),
        ),
        "reset_front_io_phy": (
            args: {},
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),
        "set_front_io_phy_osc_state": (
            args: {
                "good": "bool",
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),

        "tofino_debug_port_state": (
            doc: "Return the state of the Tofino debug port",
            args: {},
            reply: Result(
                ok: (
                    type: "DebugPortState",
                    recv: FromPrimitive("u8"),
                ),
                err: CLike("SeqError"),
            ),
        ),

        "set_tofino_debug_port_state": (
            doc: "Set the state of the Tofino debug port",
            args: {
                "state": (
                    type: "DebugPortState",
                    recv: FromPrimitive("u8"),
                ),
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),

        "tofino_read_direct": (
            doc: "Direct read a Tofino register in the given segment",
            args: {
                "segment": (
                    type: "DirectBarSegment",
                    recv: FromPrimitive("u32"),
                ),
                "offset": "u32",
            },
            reply: Result(
                ok: "u32",
                err: CLike("SeqError"),
            ),
        ),

        "tofino_write_direct": (
            doc: "Direct write a Tofino register in the given segment",
            args: {
                "segment": (
                    type: "DirectBarSegment",
                    recv: FromPrimitive("u32"),
                ),
                "offset": "u32",
                "value": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),

        "spi_eeprom_idcode": (
            doc: "Read the latched IDCODE after Tofino has loaded the PCIe SerDes parameters from SPI EEPROM",
            args: {},
            reply: Result(
                ok: "u32",
                err: CLike("SeqError"),
            ),
        ),

        "spi_eeprom_status": (
            doc: "Read the Status register of the SPI EEPROM",
            args: {},
            reply: Result(
                ok: "u8",
                err: CLike("SeqError"),
            ),
        ),

        "read_spi_eeprom_bytes": (
            doc: "Read from the SPI EEPROM at the given offset",
            args: {
                "offset": "u32",
            },
            leases: {
                "data": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),

        "write_spi_eeprom_bytes": (
            args: {
                "offset": "u32",
            },
            leases: {
                "data": (type: "[u8]", read: true),
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),

        "mainboard_controller_ready": (
            args: {},
            reply: Result(
                ok: "bool",
                err: CLike("SeqError"),
            ),
        ),

        "fan_module_status": (
            doc: "Return status signals of each fan module",
            args: {
                "module": (
                    type: "FanModuleIndex",
                    recv: FromPrimitive("u8"),
                )
            },
            reply: Result(
                ok: "FanModuleStatus",
                err: CLike("SeqError"),
            ),
        ),

        "fan_module_presence": (
            doc: "Return presence of each fan module",
            args: {},
            reply: Result(
                ok: "FanModulePresence",
                err: CLike("SeqError"),
            ),
            encoding: Hubpack,
        ),

        "fan_module_led_off": (
            doc: "Turn off the LED for a fan module.",
            args: {
                "module": (
                    type: "FanModuleIndex",
                    recv: FromPrimitive("u8"),
                )
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),

        "fan_module_led_on": (
            doc: "Turn on the LED for a fan module.",
            args: {
                "module": (
                    type: "FanModuleIndex",
                    recv: FromPrimitive("u8"),
                )
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),

        "fan_module_led_blink": (
            doc: "Blink the LED for a fan module.",
            args: {
                "module": (
                    type: "FanModuleIndex",
                    recv: FromPrimitive("u8"),
                )
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),

        "fan_module_enable": (
            doc: "Enable the hot-swap controller for a fan module.",
            args: {
                "module": (
                    type: "FanModuleIndex",
                    recv: FromPrimitive("u8"),
                )
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),

        "fan_module_disable": (
            doc: "Disable the hot-swap controller for a fan module.",
            args: {
                "module": (
                    type: "FanModuleIndex",
                    recv: FromPrimitive("u8"),
                )
            },
            reply: Result(
                ok: "()",
                err: CLike("SeqError"),
            ),
        ),
    },
)
