// Image update API for the LPC55

Interface(
    name: "Update",
    ops: {
        "block_size": (
            doc: "Get the block size for the update API. This is the length expected for the `write_one_block` call",
            args: { },
            reply: Result(
                ok: "usize",
                err: CLike("drv_update_api::UpdateError"),
            ),
        ),
        "prep_image_update": (
            doc: "Do any necessary preparation for writing the image. This may include erasing flash and unlocking registers",
            args : {
                "image_type": "UpdateTarget",
            },
            reply : Result(
                ok: "()",
                err: CLike("drv_update_api::UpdateError"),
            ),
            encoding: Hubpack,
        ),
        "write_one_block": (
            doc: "Write a single block of an update image to the designated location.",
            args: {
                "block_num" : "usize",
            },
            leases : {
                "block": (type: "[u8]", read: true, max_len: Some(1024)),
            },
            reply: Result (
                ok: "()",
                err: CLike("drv_update_api::UpdateError"),
            ),
        ),
        "abort_update": (
            doc: "Cancel the current update in progress. Must call prep_image_update again before restarting.",
            args : { },
            reply : Result(
                ok: "()",
                err: CLike("drv_update_api::UpdateError"),
            ),
        ),
        "finish_image_update": (
            doc: "Do any necessary work post image write",
            args : { },
            reply : Result(
                ok: "()",
                err: CLike("drv_update_api::UpdateError"),
            ),
        ),
        "current_version": (
            doc: "Get the current image version",
            args : { },
            reply : Simple("ImageVersion"),
            idempotent: true,
            encoding: Hubpack
        ),
        "status": (
            doc: "Get info about installed images (deprecated - use rot_boot_info)",
            args: { },
            reply : Result(
                ok: "stage0_handoff::RotBootState",
                err: Complex("HandoffDataLoadError"),
            ),
            idempotent: true,
            encoding: Hubpack
        ),
        "rot_boot_info": (
            doc: "RoT Boot selection and preference info",
            args: { },
            reply : Result(
                ok: "RotBootInfo",
                err: CLike("drv_update_api::UpdateError")
            ),
            idempotent: true,
            encoding: Hubpack
        ),
        "read_raw_caboose": (
            doc: "Reads a raw portion of the caboose",
            args: {
                "slot": "SlotId",
                "offset": "u32",
            },
            leases: {
                "data": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "()",
                err: CLike("RawCabooseError"),
            ),
            idempotent: true,
            encoding: Hubpack,
        ),
        "caboose_size": (
            doc: "Returns the size of the caboose",
            args: {
                "slot": "SlotId",
            },
            reply: Result(
                ok: "u32",
                err: CLike("RawCabooseError"),
            ),
            idempotent: true,
            encoding: Hubpack,
        ),
        "switch_default_image": (
            doc: "Prefer a specific image slot for one or many boots",
            args: {
                "slot": "SlotId",
                "duration": "SwitchDuration",
            },
            reply : Result(
                ok: "()",
                err: CLike("drv_update_api::UpdateError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "reset": (
            doc: "Reset unless an update is in progress.",
            reply : Result(
                ok: "()",
                err: CLike("drv_update_api::UpdateError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "read_rot_page": (
            doc: "Read CMPA/CFPA page",
            args: {
		"page": "RotPage",
	    },
            leases : {
                "data": (type: "[u8]", write: true, max_len: Some(512)),
            },
            reply: Result (
                ok: "()",
                err: CLike("drv_update_api::UpdateError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
    },
)
