// Control Plane Agent API

Interface(
    name: "ControlPlaneAgent",
    ops: {
        "fetch_host_phase2_data": (
            doc: "Instruct the control plane agent to fetch a portion of a host phase 2 image, identified by `hash` and starting at `offset`. When the data arrives, the control plane agent will notify the calling task, at which point it should call `get_host_phase2_data`.",
            args: {
                // Hash of the phase 2 image the host wants.
                "image_hash": "[u8; 32]",
                // Offset within the image the host wants.
                "offset": "u64",
                // Notification bit (i.e., log2 of the actual IRQ value) we
                // should use when the data has been fetched.
                "notification_bit": "u8",
            },
            reply: Result(
                ok: "()",
                err: CLike("ControlPlaneAgentError"),
            ),
        ),
        "get_host_phase2_data": (
            doc: "Get already-fetched host phase 2 data.",
            args: {
                // Hash of the phase 2 image the host wants.
                "image_hash": "[u8; 32]",
                // Offset within the image the host wants.
                "offset": "u64",
            },
            leases: {
                "data": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "usize",
                err: CLike("ControlPlaneAgentError"),
            ),
        ),
        "get_startup_options": (
            doc: "Get the most-recently-provided startup options from MGS.",
            encoding: Ssmarshal,
            reply: Result(
                ok: "HostStartupOptions",
                err: CLike("ControlPlaneAgentError"),
            ),
        ),
        "set_startup_options": (
            doc: "Set the startup options word for use by host-sp-comms.",
            args: {
                // Arguably this should be `HostStartupOptions` (our bitflags
                // type), but in practice we only call this function from hiffy,
                // so it's easier to just use a plain `u64`. We convert it to a
                // `HostStartupOptions` internally (returning an error if the
                // supplied u64 contains any invalid bits).
                "startup_options": "u64",
            },
            reply: Result(
                ok: "()",
                err: CLike("ControlPlaneAgentError"),
            ),
        ),
        "identity": (
            doc: "Get the identity of the current sled.",
            reply: Simple("VpdIdentity"),
            idempotent: true,
        ),
        "get_uart_client": (
            doc: "Get which UART client (MGS or Humility) is allowed to be active.",
            encoding: Ssmarshal,
            reply: Simple("UartClient"),
            idempotent: true,
        ),
        "get_installinator_image_id": (
            doc: "Get the current installinator image ID, returning the number of bytes written. If we have no installinator image ID, does not modify the leased buffer and returns 0.",
            leases: {
                "data": (type: "[u8]", write: true, max_len: Some(512)),
            },
            reply: Simple("usize"),
            idempotent: true,
        ),
        "set_humility_uart_client": (
            doc: "Attach or detach Humility as the host serial console client.",
            args: {
                "attach": "bool",
            },
            reply: Result(
                ok: "()",
                err: CLike("ControlPlaneAgentError"),
            ),
        ),
        "uart_read": (
            doc: "Read buffered bytes from the host console uart.",
            leases: {
                "data": (type: "[u8]", write: true),
            },
            reply: Result(
                ok: "usize",
                err: CLike("ControlPlaneAgentError"),
            ),
        ),
        "uart_write": (
            doc: "Enqueue bytes to send to the host console uart.",
            leases: {
                "data": (type: "[u8]", read: true),
            },
            reply: Result(
                ok: "usize",
                err: CLike("ControlPlaneAgentError"),
            ),
        ),
    },
)
