// Sensor API

Interface(
    name: "Sensor",
    ops: {
        "get": (
            args: {
                "id": (
                    type: "SensorId",
                ),
            },
            reply: Result(
                ok: "f32",
                err: CLike("SensorError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "get_reading": (
            args: {
                "id": (
                    type: "SensorId",
                )
            },
            reply: Result(
                ok: "Reading",
                err: CLike("SensorError"),
            ),
            encoding: Hubpack,
            idempotent: true,
        ),
        "get_raw_reading": (
            description: "returns the most recent reading (data or error) and its timestamp",
            args: {
                "id": (
                    type: "SensorId",
                )
            },
            reply: Simple("Option<(Result<f32, NoData>, u64)>"),
            encoding: Hubpack,
            idempotent: true,
        ),
        "get_last_data": (
            description: "returns the most recent data reading and its timestamp",
            args: {
                "id": (
                    type: "SensorId",
                )
            },
            reply: Simple("Option<(f32, u64)>"),
            encoding: Hubpack,
            idempotent: true,
        ),
        "get_last_nodata": (
            description: "returns the most recent error recorded and its timestamp",
            args: {
                "id": (
                    type: "SensorId",
                )
            },
            reply: Simple("Option<(NoData, u64)>"),
            encoding: Hubpack,
            idempotent: true,
        ),
        "get_min": (
            description: "returns the minimum value recorded and its timestamp",
            args: {
                "id": (
                    type: "SensorId",
                )
            },
            reply: Simple("(f32, u64)"),
            encoding: Hubpack,
            idempotent: true,
        ),
        "get_max": (
            description: "returns the maximum value recorded and its timestamp",
            args: {
                "id": (
                    type: "SensorId",
                )
            },
            reply: Simple("(f32, u64)"),
            encoding: Hubpack,
            idempotent: true,
        ),
        "post": (
            args: {
                "id": (
                    type: "SensorId",
                ),
                "value": "f32",
                "timestamp": "u64",
            },
            reply: Simple("()"),
            encoding: Hubpack,
            idempotent: true,
        ),
        "nodata": (
            args: {
                "id": (
                    type: "SensorId",
                ),
                "nodata": (
                    type: "NoData",
                ),
                "timestamp": "u64",
            },
            reply: Simple("()"),
            idempotent: true,
            encoding: Hubpack,
        ),
        "get_nerrors": (
            args: {
                "id": (
                    type: "SensorId",
                )
            },
            reply: Simple("u32"),
            idempotent: true,
            encoding: Hubpack,
        ),
    },
)
